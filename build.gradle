buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id "com.jfrog.artifactory" version "4.7.2"
    id "org.unbroken-dome.gitversion" version "0.10.0"
}
//todo align plugins to one convention (apply/plugins section)

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.github.filipmalczak'
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    currentVersion = "0.1.0"
}

gitVersion {
    rules {
        before {
            version = "$currentVersion-$branchName-SNAPSHOT"
            project.ext {
                currentState = "FEATURE"
            }
        }
        onBranch("master"){
            version = currentVersion
            project.ext {
                currentState = "RELEASE"
            }
        }
        onBranch("dev"){
            version = "$currentVersion-SNAPSHOT"
            project.ext {
                currentState = "SNAPSHOT"
            }
        }
    }
}

version = gitVersion.determineVersion()

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'
	compile group: 'ma.glasnost.orika', name: 'orika-core', version: '1.5.2'
    compile 'uk.com.robust-it:cloning:1.9.10'

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
	testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.18.3'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'

	testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
	testRuntime 'org.junit.vintage:junit-vintage-engine:5.2.0' //required for Spock

    compileOnly('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')
}

test {
    useJUnitPlatform()
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination new File(buildDir, "/reports/jacoco/report.xml")
        html.enabled true
        html.destination new File(buildDir, "/reports/jacoco/html")
    }
}

test.doLast jacocoTestReport.&execute

ext {
    bintrayRepo = 'maven'
    artifactoryRepo = currentState == "RELEASE" ? 'oss-release-local' : 'oss-snapshot-local'
    publishingUser = project.hasProperty("publishingUsername") ?
            project.getProperty("publishingUsername") :
            System.getenv("PUBLISHING_USERNAME")
    publishingKey = project.hasProperty("publishingApiKey") ?
            project.getProperty("publishingApiKey") :
            System.getenv("PUBLISHING_API_KEY")
}

publishing {
    publications {
        VentPublication(MavenPublication) {
            from components.java
            artifact jar
            groupId project.group
            artifactId project.name
            version project.version
        }
    }
}

bintray {
    user = publishingUser
    key = publishingApiKey
    publications = ['VentPublication']
    pkg {
        repo = bintrayRepo
        name = 'vent'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/FilipMalczak/vent.git'
        githubRepo = "FilipMalczak/vent"
    }
}

artifactory {
    contextUrl = artifactory_url
    publish {
        repository {
            repoKey = artifactoryRepo
            username = publishingUser
            password = publishingApiKey
        }
        defaults {
            publications 'VentPublication'
            publishArtifacts = true
            publishPom = true
        }
    }
    clientConfig.setIncludeEnvVars(false)
    if (System.getenv("TRAVIS") == "true") {
        clientConfig.info.setBuildName("TRAVIS"+System.getenv("TRAVIS_BUILD_ID"))
        clientConfig.info.setBuildNumber("TRAVIS"+System.getenv("TRAVIS_BUILD_NUMBER"))
    }
}

bootJar.enabled = false
jar.enabled = true

task assertPublishingIsPossible {
    doFirst {
        assert publishingUser != null
        assert publishingKey != null
    }
}

task publishArtifacts(group: "publishing") {
    dependsOn assertPublishingIsPossible
    dependsOn artifactoryPublish
    if (currentState == "RELEASE")
        dependsOn bintrayUpload
}

artifactoryPublish.shouldRunAfter(assertPublishingIsPossible)
bintrayUpload.shouldRunAfter(assertPublishingIsPossible)

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '4.7'
}

//todo: split to embedded and web modules
//todo migrate from travis.org to travis.com https://blog.travis-ci.com/2018-05-02-open-source-projects-on-travis-ci-com-with-github-apps?utm_source=Broadcast&utm_campaign=2may_release

